homeassistant:
  t3e_02:
    objects:
      - obj: "p0b4"
        properties:
          "val": "{{states('openhasp.t3e_02') | int(0) -1}}"
      - obj: "p0b5"
        properties:
          "text": "{% if states('sensor.outdoor_temperature') != 'unknown' %} {{'\\ue50f'}} {{states('sensor.outdoor_temperature') }}{{'\\u00b0'}}C {% else %} {{'\\ue50f'}} -.- {{'\\u00b0'}}C {% endif %}"
      - obj: "p0b6"
        properties:
          "text": "{{ states('sensor.time') }}"
      - obj: "p0b7"
        properties:
          "text_color": "{% if -30 <= state_attr('openhasp.t3e_02','rssi') | int(0) %}green{% elif -31 > state_attr('openhasp.t3e_02','rssi') | int(0) >= -50 %}orange{% elif -51 > state_attr('openhasp.t3e_02','rssi') |int (0) >= -80 %}tomato{% else %}red{% endif %}"
      


      
      - obj: "p1b2"
        properties:
          "value_str": >-
              {% if states('binary_sensor.solivia_night_status') == 'on' %}{{'\ue594'}}{% else %}{{'\ue599'}}{% endif %}
          "val": "{{ states('sensor.solar_ac_power') }}"
      - obj: "p1b5"
        properties:
          "text": "{{ states('sensor.solar_ac_power') }} W"
          "text_color": "{% if 500 > states('sensor.solar_ac_power') | int(0) %}red{% elif 1000 > states('sensor.solar_ac_power') | int(0) >= 500 %}orange{% elif 1500 > states('sensor.solar_ac_power') |int (0) >= 1000 %}yellow{% else %}green{% endif %}"
      - obj: "p1b3"
        properties:
          "val": "{{ states('sensor.total_active_power') }}"
      - obj: "p1b4"
        properties:
          "text": "{{ states('sensor.total_active_power') }} Wh"
          "text_color": "{% if 0 > states('sensor.total_active_power') | int(0) %}green{% elif 750 > states('sensor.total_active_power') | int(0) >= 0 %}yellow{% elif 1500 > states('sensor.total_active_power') |int (0) >= 750 %}orange{% else %}red{% endif %}"
      - obj: "p1b10"
        properties:
          "text": "{{ (states('sensor.solar_daily_yield') | float / 1000) | round(1) }} kWh"
      - obj: "p1b11"
        properties:
          "text": "\ue04d{{ states('sensor.daily_energy_export_total') | round(1) }} kWh"
      - obj: "p1b12"
        properties:
          "text": "\ue054{{ states('sensor.daily_energy_import_total') | round(1) }} kWh"
      - obj: "p1b13"
        properties:
          "text": "{{ (states('sensor.daily_energy_import_total') | float + states('sensor.daily_solar_consumption_total') | float) | round(1) }} kWh"
      - obj: "p1b20"
        properties:
          "text": "{{ '%.2f' | format (states('sensor.nordpool_kwh_dk1_dkk_2_095_025') |round(2)) }} dkk"
      - obj: "p1b30"
        properties:
          "speed": "{% set s = ((3600 / (states('sensor.solar_ac_power') | float + 0.001)) * 5) | int * 200  %}{% if s == 3600000000 %}65535{% elif s > 65535 %}65535{% else %}{{ s | int }}{% endif %}"
      - obj: "p1b31"
        properties:
          "direction": "{% if states('sensor.daily_energy_import_total') | float >= states('sensor.daily_energy_export_total') | float %}0{% else %}1{% endif %}"
      # Special calculation done in order to get the spinner speed in 200 ms steps and minimize changes to object
      # Every change in speed resets spinner to start again at 12 o'clock
      - obj: "p1b32"
        properties:
          "speed": "{% set s = ((3600 / (states('sensor.energy_consumption_current') | float + 0.001)) * 2.5) | int * 400  %}{% if s == 3600000000 %}0{% elif s > 65535 %}65535{% else %}{{ s | int }}{% endif %}"
          "direction": "{% if states('sensor.total_active_power') | int > 0 %}0{% else %}1{% endif %}"

    




sensor:
    # Current energy consumption sensor
    # Checks if value is negative and keeps old sensor value in that case
  - platform: template
    sensors:
      energy_consumption_current:
        friendly_name: "Current Energy Consumption"
        unit_of_measurement: 'W'
        value_template: >
          {% if (states('sensor.total_active_power') | int + states('sensor.solar_ac_power') | int) >= 0 %}
            {{ states('sensor.total_active_power') | int + states('sensor.solar_ac_power') | int }}
          {% else %}
            {{ states('sensor.energy_consumption_current') }}
          {% endif %}
